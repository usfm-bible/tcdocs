#!/usr/bin/python3

import os, sys, argparse, logging
from usfmtc.validating.usfmgrammar import UsfmGrammarParser, XmlGrammarParser

from usfmtc.diagrams.usxgrammar import alljobs
from usfmtc.diagrams.diagrams import UsfmRailRoad, XmlRailRoad
import xml.etree.ElementTree as et

parser = argparse.ArgumentParser()
parser.add_argument("-g","--grammar",required=True,help="USX grammar file")
parser.add_argument("-o","--outdir",required=True,help="Output directory for generated svgs")
parser.add_argument("-p","--prefix",help="link prefix for any links generated")
parser.add_argument("-n","--node",help="Process a single node")
parser.add_argument("-C","--charwidth",type=float,default=6.,help="Average width of characters to use")
parser.add_argument("-l","--logging",help="Set logging level to usfmxtest.log")
parser.add_argument("-z","--debug",type=int,default=0,help="bit 0 - print job name")
args = parser.parse_args()

if args.logging:
    try:
        loglevel = int(args.logging)
    except ValueError:
        loglevel = getattr(logging, args.logging.upper(), None)
    if isinstance(loglevel, int):
        parms = {'level': loglevel, 'datefmt': '%d/%b/%Y %H:%M:%S', 'format': '%(asctime)s.%(msecs)03d %(levelname)s:%(module)s(%(lineno)d) %(message)s'}
        logfh = open("mkraildiagrams.log", "w", encoding="utf-8")
        parms.update(stream=logfh, filemode="w") #, encoding="utf-8")
        try:
            logging.basicConfig(**parms)
        except FileNotFoundError as e:      # no write access to the log
            print("Exception", e)
    log = logging.getLogger('mkraildiagrams')

rdoc = et.parse(args.grammar)
backendsfm = UsfmRailRoad()
backendxml = XmlRailRoad()
sfmproc = UsfmGrammarParser(rdoc, backendsfm, flattenre=False, hrefprefix=args.prefix)
xmlproc = XmlGrammarParser(rdoc, backendxml)

if args.node:
    jobs = {args.node: alljobs[args.node]}
else:
    jobs = alljobs 
    jobs['all'] = ('all',)

for k, j in jobs.items():
    keeps = j[1] if len(j) > 1 else []
    for a in (("rail", True), ("usx", False)):
        if not a[1] and len(j) > 2:
            keeps = keeps + j[2]
        if args.debug & 1:
            print(f"{j[0]}_{a[0]}")
        #rdia = RDiagram(k, rdoc, keeps=keeps, cwidth=args.charwidth)
        #rgram.makediagram(k, rdia=rdia, usfm=a[1])
        back = backendsfm if a[1] else backendxml
        proc = sfmproc if a[1] else xmlproc
        p = proc
        try:
            if p.parseRef('Scripture' if k == 'all' else k, flattens=keeps, flattenall=(k=='all')) is None:
                continue
        except IndexError:
            continue
        outfile = os.path.join(args.outdir, "{}_{}.svg".format(j[0], a[0]))
        with open(outfile, "w", encoding="utf-8") as outf:
            d = back.output(p.curr, color='rgb(210, 255, 210)' if a[1] else 'rgb(210, 210, 255)')
            d.writeSvg(outf.write)
