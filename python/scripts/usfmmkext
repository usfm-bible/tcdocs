#!/usr/bin/env python3

import argparse, sys
import xml.etree.ElementTree as et

relaxns = "{http://relaxng.org/ns/structure/1.0}"
usfmns = "{http://usfm.bible/parse/2023}"
ans="{http://relaxng.org/ns/compatibility/annotations/1.0}"

def collectEnums(rdoc):
    res = {}
    for e in rdoc.findall('./{0}define'.format(relaxns)):
        name = e.get('name')
        if not name.endswith(".style.enum"):
            continue
        mktype = name[:name.find(".")].lower()
        currk = None
        for i, v in enumerate(e[0]):
            if v.tag == "{0}value".format(relaxns):
                k = v.text.strip()
                if k in res:
                    res[k]['category'].add(mktype)
                else:
                    res[k] = {'category': set([mktype])}
                for a in (("propval", "defattrib"), ("propattribs", "attributes"),
                          ("propended", "closedby"), ("propends", "closes")):
                    val = v.get("{}{}".format(usfmns, a[0]), None)
                    if val is not None:
                        res[k][a[1]] = val
                currk = k
            elif v.tag == "{0}documentation".format(ans) and currk in res:
                res[currk]['description'] = v.text.strip()
    return res

def extstr(mrkr, field):
    res = [f"\\marker {mrkr}"]
    for k, v in sorted(field.items()):
        if k == "category":
            res.append(f'\\{k} {" ".join(sorted(v))}')
        else:
            res.append(f"\\{k} {v}")
    return "\n".join(res)

parser = argparse.ArgumentParser()
parser.add_argument("infile",help="Input RNG XML file")
parser.add_argument("-o","--outfile",help="Output .ext file")
parser.add_argument("-l","--lists",help="Output lists of markers to this file")
args = parser.parse_args()

rdoc = et.parse(args.infile)
res = collectEnums(rdoc)
if args.outfile is not None:
    outf = open(args.outfile, "w")
else:
    outf = sys.stdout

output = [extstr(k, v) for k, v in sorted(res.items())]
outf.write("\n\n".join(output))

if args.outfile:
    outf.close()

if args.lists:
    lists = {}
    for k, v in res.items():
        lists.setdefault(v.get('category', [""])[0], []).append(k)
    with open(args.lists, "w") as outf:
        for k, v in sorted(lists.items()):
            outf.write(f"{k}= {' '.join(v)}\n")
